
`reset rnd seed value
randomize timer()
`Prepare Delta movement
global deltaLoopTime : Global deltaLastTime : updateDelta()

`Prepare the variable slots
global variableCount : variableCount = 0
dim variableName(variableCount) as string
dim variableNumber(variableCount) as integer
dim variableData(variableCount) as string

`prepare the array slots
global arrayCount : arrayCount = 0

dim arrayListName(arrayCount) as string
dim arrayListSize(arrayCount) as integer
dim arrayListIndex(arrayCount) as integer
dim arrayListEnd(arrayCount) as integer

global dataCount : dataCount = 0
dim arrayName(dataCount) as string
dim arrayData(dataCount) as string

`prepare data slots
global datcnt
dim datname(datcnt) as string
dim datentry(datcnt) as string

`internal parser variables
Global bracketCount : bracketCount = 0
Global commandCount : commandCount = 0

`Code Modes MScript, IScript, LScript, EScript
Global Code_Mode
#Constant MScript 0
#Constant IScript 1
#Constant LScript 2
#Constant EScript 3
`Number for entity variables.
Global entityCount
`Set the code mode to the Main Script, even though it already is
Code_Mode = MScript

`Main script storage
global Script_File_Lin : Script_File_Lin = 0
dim Script_File$(0, 3)
dim Script_File_Lin(3)
dim Current_Line(3)

`function variables
`function vars
global fun_c
global fun_l_c

dim function_name(fun_c) as string

dim function_lines(fun_c)
dim function_code(fun_c, fun_l_c) as string

global fun_v_c
dim function_vars_c(fun_c)
dim function_vars(fun_c, fun_v_c) as string

global in_function_rslt as string
global in_function_cnt as integer
global returning_function_data as integer
			

`store loaded master objects
global oo_c_obj_master_c as integer
dim oo_c_obj_master_f(c_obj_master_c) as string
dim oo_c_obj_master_n(c_obj_master_c) as integer

`AGE specific setup

`AGE Level Objects
type objectDataValues
	X as float
	Y as float
	Z as float
	Xa as float
	Ya as float
	Za as float
	Object as integer
	Size as float
	ScaleX as integer
	ScaleY as integer
	ScaleZ as integer
	Collision as integer
	Transparency as integer
	Ghost as integer
	Fade as integer
	Animate as integer
	Billboarding as integer
	Billboardon as integer
	clone as integer
	id as string
	detail as string
	fpath as string
endtype

Global highestObjectNumber : highestObjectNumber = 0
Dim sceneObject(highestObjectNumber) as objectDataValues

`Holds the the last object number
global oo_highestObjectNumber : oo_highestObjectNumber = 0

Global Default_X#
Global Default_Y#
Global Default_Z#
Global Default_Xa#
Global Default_Ya#
Global Default_Za#

`Prepare light variables
global light_count
dim light_range(light_count) as float
dim light_colour(light_count)
dim light_position(light_count, 3) as float
global active_lights_count : active_lights_count = 3
dim active_lights(active_lights_count)

if active_lights_count > 0
	for a = 1 to active_lights_count
		make light a
		set light range a, 0
		color light a, 0
	next a
endif

`Prepare sun variables ~
Global Sun_Object
Global Sun_Distance#
Global Sun_Rotation#

`DD and BB settings
global drawDistance : drawDistance = 20
global BBa# : BBa# = 5
global BBb# : BBb# = 81

`text settings
set text font "arial"
set text size 12
set text transparent
	`used within New_ink(colour)
Global Current_ink
Global Original_ink
New_ink(rgb(255,255,255))


Global applicationDirectory as string : applicationDirectory = get dir$()
Global Main_Dir$ : Main_Dir$ = applicationDirectory
global currentSceneName as string : currentSceneName = ""
global sceneToLoad as string 
global mediaDirectory as string 
`net vars
global net_message_type : net_message_type = 0
global safe_mode : safe_mode = 0

`check if file has been passed to it
command_line$ = CL$()


if command_line$ <> ""
	null = len(command_line$)
	Script_File$ = right$(left$(command_line$, null-1), null-2)
	mediaDirectory = applicationDirectory
	safe_mode = 1
else
	if file exist("main.agm")
		mediaDirectory = fsr("prefab dir","main.agm")
		set dir mediaDirectory : mediaDirectory = get dir$() : Set dir Main_Dir$
		Script_File$ = fsr("script file","main.agm")
		safe_mode = 0
	else
		message "Missing File!", "There is no agm file to load or compile."
	end
	endif
endif

remstart
mediaDirectory = fsr("prefab dir","main.agm")
set dir mediaDirectory : mediaDirectory = get dir$() : Set dir Main_Dir$
Script_File$ = fsr("script file","main.agm")
safe_mode = 0
remend
if file exist(Script_File$) = 0
	message "Missing File!", "There is no script file to load or compile."
	end
endif

`open and read the script file - apply any encryption here
open to read 1, Script_File$

repeat
		
	read string 1, New_Line$
	Scan_Line(New_Line$)
	
until file end(1)
close file 1

	

	
	`scan for additional functions
set dir mediaDirectory
if path exist("data\functions")	
	set dir "data\functions"
	find first
	repeat
		if GET FILE TYPE() = 0
						`a file
			if lower$(right$(get file name$(), 7)) = ".script"
				open to read 2, get file name$()
				repeat
					read string 2, New_Line$
					Scan_Line(New_Line$)
				until file end(2)
				close file 2
			endif
		endif
	find next
until GET FILE TYPE() = -1
			
endif
set dir Main_Dir$
	
	`define the end of the file for a clean exit
Add_Code_Line("end")
	
	`work out the functions and stuffs
compile_prerun()
		
Save_Compiled_Code("cscript.txt")
	
	`Go through the file
Current_Line(Code_Mode) = 0

do
	inc Current_Line(Code_Mode)
	Define_Line()
loop



end


`function placeholders used by vgc
function add_scg_object(a, b)
endfunction
function delete_scg_object(a)
endfunction